generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DIRECT_URL")
  directUrl = env("DIRECT_URL")
}

/**
 * Device Model
 *
 * LEARNING: This table stores information about physical sensor devices
 *
 * STRUCTURE:
 * - device_id: Unique string identifier (e.g., "SENSOR_001")
 * - name: Human-readable format "L8_53_12" meaning Lamela-8, Building-53, Apartment-12
 * - location: Just the lamela part (e.g., "L8")
 * - device_type: Enum for different sensor types
 * - description: Optional notes about the device
 *
 * IMPORTANT: The device_id (STRING) in this table does NOT directly map
 * to device_id (INT) in thermionyx_measurements table. The relationship
 * is indirect - you need to parse the 'name' field to understand which
 * apartment/building a device belongs to.
 */
model Device {
  device_id         String                           @id @db.VarChar
  device_type       Unsupported("device_type_enum")?
  location          String?                          @db.VarChar
  description       String?
  // COMMENT: name is structured like "L8_53_12" (Lamela-8, Building-53, Apartment-12)
  // location shows just "L8" (the lamela)
  // device_id is the primary key
  name              String?

  @@map("devices")
}

model scada_measurements {
  datetime   DateTime @db.Timestamp(6)
  location   String   @db.VarChar
  t_amb      Float?
  t_ref      Float?
  t_sup_prim Float?
  t_ret_prim Float?
  t_sup_sec  Float?
  t_ret_sec  Float?
  e          Float?
  pe         Float?

  @@id([datetime, location])
}

model thermionyx_measurements {
  datetime          DateTime @db.Timestamp(6)
  device_id         Int
  probe_id          Int
  temperature       Float?
  relative_humidity Float?
  co2               Float?

  @@id([datetime, device_id, probe_id])
}

/**
 * REMOVED: tuya_measurements table
 *
 * REASON: We are using thermionyx_measurements table instead for Thermionix sensor data
 * This model has been commented out to remove Tuya references from the application
 */
// model tuya_measurements {
//   datetime       DateTime @db.Timestamp(6)
//   location       String?  @db.VarChar
//   device_id      String   @db.VarChar
//   co2_value      Int?
//   temp_current   Int?
//   humidity_value Int?
//   voc_value      Int?
//   ch2o_value     Int?
//   co2_state      String?  @db.VarChar
//   devices        Device   @relation(fields: [device_id], references: [device_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_device")
//
//   @@id([datetime, device_id])
// }

model weatherlink_measurements {
  datetime              DateTime  @db.Timestamp(6)
  location              String    @default("WeatherStation1") @db.VarChar
  bar_trend             Int?
  bar                   Float?
  temp_in               Float?
  hum_in                Int?
  temp_out              Float?
  wind_speed            Float?
  wind_speed_10_min_avg Float?
  wind_dir              Int?
  hum_out               Int?
  rain_rate_mm          Float?
  uv                    Float?
  solar_rad             Float?
  rain_storm_mm         Float?
  rain_storm_start_date DateTime? @db.Timestamp(6)
  rain_day_mm           Float?
  rain_month_mm         Float?
  rain_year_mm          Float?
  et_day                Float?
  et_month              Float?
  et_year               Float?
  wet_leaf_4            Int?
  forecast_rule         Int?
  forecast_desc         String?
  dew_point             Int?
  heat_index            Float?
  wind_chill            Float?
  wind_gust_10_min      Float?

  @@id([datetime, location])
}

// User Settings Model
// COMMENT: This stores per-user expected temperature and pressure ranges
// that will be used to determine warning states (too high/too low) on the dashboard
// The user_id maps to Supabase Auth user UUID
model UserSettings {
  id        String   @id @default(uuid()) @db.Uuid
  user_id   String   @unique @db.Uuid // Supabase Auth user ID

  // Temperature range settings (in Celsius)
  // COMMENT: These define what the user considers "normal" operating temperature
  // Values outside this range will trigger visual warnings (red/blue backgrounds)
  expected_temp_min Float @default(23.0)
  expected_temp_max Float @default(26.0)

  // Pressure range settings (unit should be consistent across your system)
  // COMMENT: Similar to temperature, these define acceptable pressure bounds
  expected_pressure_min Float @default(1.5)
  expected_pressure_max Float @default(2.5)

  // Metadata
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  @@map("user_settings")
}
